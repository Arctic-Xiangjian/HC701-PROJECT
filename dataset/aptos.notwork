import torch
import os
import numpy as np
import pandas as pd
from torch.utils.data import Dataset
import cv2

# Try to load all data to memory

class APTOS(Dataset):
    def __init__(self, root_dir, transform=None, train=True):
        self.root_dir = root_dir
        self.transform = transform
        self.train = train
        self.train_image_path = os.path.join(self.root_dir, 'data/train_images')
        self.test_image_path = os.path.join(self.root_dir, 'data/test_images')
        self.train_csv_path = os.path.join(self.root_dir, 'data/train.csv')
        self.test_csv_path = os.path.join(self.root_dir, 'data/test.csv')
        self.data = []
        self.labels = []
        
        if self.transform is None:
            print('No transform is applied, default resize to (1024, 1024)')

        if self.train:
            train_data = pd.read_csv(self.train_csv_path)
            for image_id, diagnosis in zip(train_data['id_code'], train_data['diagnosis']):
                image_path = os.path.join(self.train_image_path, image_id + '.png')
                image = cv2.imread(image_path)
                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                if self.transform is None:
                    image = cv2.resize(image, (1024, 1024))
                else:
                    image = self.transform(image)
                self.data.append(image)
                self.labels.append(diagnosis)
        else:
            test_data = pd.read_csv(self.test_csv_path)
            for image_id in test_data['id_code']:
                image_path = os.path.join(self.test_image_path, image_id + '.png')
                image = cv2.imread(image_path)
                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                if self.transform is None:
                    image = cv2.resize(image, (1024, 1024))
                else:
                    image = self.transform(image)
                self.data.append(image)

    def __len__(self):
        return len(self.data)
    
    def __getitem__(self, idx):
        if self.train:
            return self.data[idx], self.labels[idx]
        else:
            return self.data[idx]